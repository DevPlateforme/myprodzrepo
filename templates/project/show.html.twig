{% extends 'base.html.twig' %}



{% block title %}My project{% endblock %}


{% block body %}

<style>



@media all and (max-width: 10000px){
   
    
body{
  color: #43BE1C;
 font-family: "Source Code Pro", monospace;
 font-family: "Exo 2", sans-serif;
 text-shadow: 0 0 2px #379D17;
}

#liquidProgressBar{

  width:65%;
  height:40%;
  display:flex;
  flex-direction:row;
  align-items:center;
  justify-content:space-around;

}

#backDiv{
  width: 100vw;
  height: 90vh;
  display:flex;
  flex-direction:row;
  justify-content:center;
}


#middleDiv{
   width: 60%;
   display: flex;
   flex-direction: column;
   align-items: center;
   justify-content: center;

   padding-top: 18vh;


}


#flaskLogo{
   height: 22vh;
   width: auto;
   
   
}

#startBtn{

background: none;
border: none;
outline: none;

  color: #43BE1C;
 font-family: "Source Code Pro", monospace;
 font-family: "Exo 2", sans-serif;
 text-shadow: 0 0 4px #379D17;
   
}
#totalProgress{

   font-size: 26px;
}
body {
  width:100%;
  position:relative;
  padding:0;
  margin:0;
}

#leftDiv{
  position:absolute; 

  width:30%; 
  height:90vh; 
  right:69vw; 
  top:6vh; 

  display: flex;

  flex-direction: column;

  justify-content: space-around;
  
  align-items: center;
  
  
}


#leftDivHeader{

  height: 20%;

  width: 95%;

  display: flex;

  flex-direction: column;

  justify-content: center;

  align-items: start;
  
  
}




#leftDiv1{

  border-radius: 5px;
  margin-top: 3vh;
  height: 35%;
  width: 95%;
  display: flex;
  flex-direction: column;
  justify-content: space-around;
  align-items: center;
  background:#161b3d;
  }


#leftDiv1Title {

  height: 10%;

  width: 100%;

  display: flex;

  justify-content: flex-start;

  align-items: center;

}

#leftDiv1Title p {
  
  font-size: 14px;



}


#leftDiv1 #leftDiv1Charts{

height: 80%;

width: 100%;

display: flex;

justify-content: center;

align-items: center;

padding-right: 5%;

margin-top: auto;

}


#leftDiv1 #leftDiv1Charts div{

width: 50%;
}



#leftDiv2{

margin-top: 2vh;


border-radius: 5px;
  
height: 35%;

width: 95%;

display: flex;

flex-direction: column;

justify-content: space-around;

background:#161b3d;

margin-bottom : 10vh;

}

#leftDiv2Title{
  height: 10%;

  width: 100%;
  display: flex;

  justify-content: flex-start;
}

#leftDiv2Charts{

height: 70%;

width: 100%;

display: flex;

justify-content: center;

align-items: center;

padding-right: 5%;

}


#leftDiv2Charts div{

width: 33.3%;
}


#leftDiv2Charts div canvas{

}




#rightDiv{

  width: 33%; 
  height: 91vh; 
  position:absolute; 
  left:68vw; 
  top:9vh; 

  display:flex;

  flex-direction: column;

  justify-content: space-between;

  align-items: center;

  margin-top: 5vh;

 }


#rightDiv1{
  
  margin-top: 3vh;

  height:75%;

  width:80%;
  
  display: flex;

  flex-direction: column;

  justify-content: space-around;

  background:#161b3d;
  
}


#comparisonDiv{


   width: 60%;

   margin: auto;

}

#sequencesDiv{

  height: 25%;

   width: 100%;

   display: flex;

   flex-direction: column;

   align-items: center;

   justify-content: start;

   padding: 10%;

  }

#sequencesDiv div{

height: 30%;

width: 5O%;

display: flex;

justify-content: center;

align-items: center:

flex-direction: column;


}


#topTimeDiv{

  width: 80%;
  margin: auto;

}






#rightDiv2{
  margin-bottom: 10vh;
  height:10%;

  width:80%;

  display: flex;

  justify-content: center;

  align-items: center;

  background:#161b3d;

  }

.mo-fire {
  opacity: 0;
  width: 23%;
  height: auto;
  display: flex;

  margin-right: 6%;
  

  justify-content: flex-start;

  align-items: center;
}
.mo-fire svg {
  width: 100%;
  height: auto;
}
.flame {
  animation-name: flamefly;
  animation-duration: 2s;
  animation-timing-function: linear;
  animation-iteration-count: infinite;
  opacity: 0;
  transform-origin: 50% 50% 0;
}
.flame.one {
  animation-delay: 1s;
  animation-duration: 3s;
}
.flame3.two{
  animation-duration: 5s;
  animation-delay: 1s;
}
.flame-main {
  animation-name: flameWobble;
  animation-duration: 3s;
  animation-timing-function: linear;
  animation-iteration-count: infinite;
}
.flame-main.one {
  animation-duration: 4s;
  animation-delay: 1s;
}
.flame-main.two {
  animation-duration: 3s;
  animation-delay: 2s;
}
.flame-main.three {
  animation-duration: 2.1s;
  animation-delay: 3s;
}
.flame-main.four {
  animation-duration: 3.2s;
  animation-delay: 4s;
}
.flame-main.five {
  animation-duration: 2.5s;
  animation-delay: 5s;
}
@keyframes flameWobble {
  50% {
    transform: scale(1,1.2) translate(0, -30px) rotate(-2deg);
  }
}
@keyframes flamefly {
  0%{
    transform: translate(0) rotate(180deg);
  }
   50% {
     opacity: 1;
  }
  100% {
    transform: translate(-20px, -100px) rotate(180deg);
    opacity: 0;
  }


    
  }

  @media all and (min-width: 2400px){

   
      #flaskLogo{
         height: 14vh;
         width: auto;
       }

    #liquidProgressBar{

      width:50%;
      height:23%;
}



  }
   



  @media all and (max-width: 500px){
   
    
#middleDiv{

  width: 100vw;
}


#leftDivHeader{

position: fixed;

top: 1vh;

z-index: 7;
}

#rightDiv{

  top: 220vh;

  width: 100vw;

  left : 0px;

}


#leftDiv{

  top: 110vh;

  width: 100vw;

  left: 0px;
  


      }

      
   }


</style>
<br>




<div id="leftDiv">

  <div id="leftDivHeader">
    
   <div id='idText' style='font-size: 8px'></div>
   <div id='idText2' style='font-size: 8px'></div>
   <div id='idText3' style='font-size: 8px'></div>
   <div id='idText4' style='font-size: 8px'></div>
      
  </div>

    <div id='leftDiv1'>

     <div id='leftDiv1Title'>

        <p>Durée totale</p>

    </div>

    <div id='leftDiv1Charts'>

           <div>
             <canvas id="totalCountHoursChart"></canvas>
           </div>

           <div>
             <canvas id="totalCountMinutesChart"></canvas>
           </div>

    </div>

 
    </div>

    <div  id='leftDiv2'>

       <div id='leftDiv2Title'>
          <p style='font-size: 14px'>Durée journalière</p>
       </div>

        <div id='leftDiv2Charts'>
           <div>
             <canvas id="dailyCountHoursChart"></canvas>
           </div>

             <div>
               <canvas id="dailyCountMinutesChart"></canvas>
             </div>

             <div>
             <canvas id="dailyCountSecondsChart"></canvas>
            </div>
         </div>
    
    </div>
     


</div>

<div id="rightDiv">


   <div id='rightDiv1'>

       <div id='comparisonDiv'>
     
            <canvas id="comparisonChart"></canvas>
  
       </div>
           

       <div id='sequencesDiv'>

              <div>
               <p style='font-size: 12px'>Séquence moyenne</p>
              </div>
           
              <div>
                <p id='averageSequenceHTML'style='font-size: 12px'></p>
              </div>
       </div>

       <div id='topTimeDiv'> 

          <canvas id="topTimeChart"></canvas>
         
       </div>

  </div>


</div>


<div id='backDiv'>


<div id='middleDiv'>

   <div>

   <div style='display: flex; flex-direction: column; justify-content: center; align-items: center; margin-top: 5vh'>
     <img id ='flaskLogo' src='{{ asset("images/flask"~ substanceColor ~ ".png") }}'> 
     
     <div style='color: white; position: absolute; margin: auto' id='totalProgress'></div>
      
    
   <div class="mo-fire" id='fireLogo'>
        <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 width="125px" height="189.864px" viewBox="0 0 125 189.864" enable-background="new 0 0 125 189.864" xml:space="preserve">
        <path class="flame-main" fill="#F36E21" d="M76.553,186.09c0,0-10.178-2.976-15.325-8.226s-9.278-16.82-9.278-16.82s-0.241-6.647-4.136-18.465
	c0,0,3.357,4.969,5.103,9.938c0,0-5.305-21.086,1.712-30.418c7.017-9.333,0.571-35.654-2.25-37.534c0,0,13.07,5.64,19.875,47.54
	c6.806,41.899,16.831,45.301,6.088,53.985"/>
       <path class="flame-main one" fill="#F6891F" d="M61.693,122.257c4.117-15.4,12.097-14.487-11.589-60.872c0,0,32.016,10.223,52.601,63.123
	c20.585,52.899-19.848,61.045-19.643,61.582c0.206,0.537-19.401-0.269-14.835-18.532S57.576,137.656,61.693,122.257z"/>
      <path class="flame-main two" fill="#FFD04A" d="M81.657,79.192c0,0,11.549,24.845,3.626,40.02c-7.924,15.175-21.126,41.899-0.425,64.998
	C84.858,184.21,125.705,150.905,81.657,79.192z"/>
      <path class="flame-main three" fill="#FDBA16" d="M99.92,101.754c0,0-23.208,47.027-12.043,80.072c0,0,32.741-16.073,20.108-45.79
	C95.354,106.319,99.92,114.108,99.92,101.754z"/>
     <path class="flame-main four" fill="#F36E21" d="M103.143,105.917c0,0,8.927,30.753-1.043,46.868c-9.969,16.115-14.799,29.041-14.799,29.041
	S134.387,164.603,103.143,105.917z"/>
        <path class="flame-main five" fill="#FDBA16" d="M62.049,104.171c0,0-15.645,67.588,10.529,77.655C98.753,191.894,69.033,130.761,62.049,104.171z"/>
        <path class="flame" fill="#F36E21" d="M101.011,112.926c0,0,8.973,10.519,4.556,16.543C99.37,129.735,106.752,117.406,101.011,112.926z"/>
        <path class="flame one" fill="#F36E21" d="M55.592,126.854c0,0-3.819,13.29,2.699,16.945C64.038,141.48,55.907,132.263,55.592,126.854z"/>
        <path class="flame two" fill="#F36E21" d="M54.918,104.595c0,0-3.959,6.109-1.24,8.949C56.93,113.256,52.228,107.329,54.918,104.595z"/>
    </svg>
  </div>
 </div>


  </div>
     


   
   
  <form id='projectDone' method='post' action= '{{path("totalCountDonePath")}}'>
   <input type='hidden' name = 'projectId' value = '{{ projectId}}'>
  </form>
<form id ="intervalForm" action= '{{ path("showProjectPath", {"projectId": projectId })}}' method="post" >
      <input id='intervalInput' type='hidden' name = 'interval' value = 'off'>
      <input id='pageReload' type='hidden' name = 'pageReload'>
      
</form>

<div id='liquidProgressBar'>

<button id="startBtn"><i class="fas fa-power-off fa fa-1x"></i></button>

<div style='width: 70%; height: 15%; display: flex; align-items: center; justify-content: flex-start; border: 2px solid white; flex-direction: row; border-radius: 5px; margin: none; box-shadow: 3px 3px 3px 3px rgba(0, 0, 0, 0.3);'>
      
    <div id='myProgressBar' style='background: url(https://s3-us-west-2.amazonaws.com/s.cdpn.io/172299/bubbles-mask.gif);  width: 0%; height: 100%; display: flex;  '> 
          
      {% if substanceColor == 'red' %}
       <div id='liquid' style=' height: 100%; width: 100%; background: rgb(255,147,147);
        background: linear-gradient(to bottom, rgba(255,147,147,1) 5%, rgba(250,68,68,1) 17%, rgba(242,23,23,1) 31%, rgba(255,50,50,1) 67%, rgba(251,114,114,1) 89%, rgba(255,143,143,1) 96%);opacity: 0.75 ; display: flex; justify-content: center; flex-direction: row';><div id='progressText' style=' font-size: 15px; width: 10%; height: 100%; display:flex; justify-content:flex-end; margin-bottom: 80px; margin-right: 24.5px; border-radius: 10px'>
      </div>
      {% elseif substanceColor == 'green' %}
       <div id='liquid' style=' height: 100%; width: 100%; background:rgb(194,238,200); background: linear-gradient(to bottom, rgba(194,238,200,1) 7%, rgba(158,245,181,1) 14%, rgba(41,215,118,1) 31%, rgba(45,223,128,1) 67%, rgba(213,255,226,1) 100%) ;opacity: 0.75 ; display: flex; justify-content: center; flex-direction: row';><div id='progressText' style=' font-size: 15px; width: 10%; height: 100%; display:flex; justify-content:flex-end; margin-bottom: 80px; margin-right: 24.5px; border-radius: 10px'>
      </div>
      {% elseif substanceColor == 'blue' %}
              
         <div id='liquid' style=' height: 100%; width: 100%; background: rgb(204,222,235); background: linear-gradient(to bottom, rgba(204,222,235,1) 7%, rgba(119,206,212,1) 14%, rgba(78,174,205,1) 31%, rgba(52,193,191,1) 67%, rgba(213,255,226,1) 100%);;opacity: 0.75 ; display: flex; justify-content: center; flex-direction: row';><div id='progressText' style=' font-size: 15px; width: 10%; height: 100%; display:flex; justify-content:flex-end; margin-bottom: 80px; margin-right: 24.5px; border-radius: 10px'>
      </div>
      {% endif %}
 
      
   </div>

   

  </div>

  

</div>

   <a href='{{ path("showGraphPath", {"projectId": projectId }) }}'<button><i class="fas fa-chart-line fa-2x"></i></button></a>
</div>
 
</body>
{% endblock %}


      {% block javascripts %}

      
       console.log('{{ comparison }}');


       
       var liquid = document.getElementById("liquid");
     
         //setInterval (function(){refreshAt(23,55,0)}, 10000000) ;
         
         
         setInterval (function(){storeValues()}, 600000) ;
      
            
        
      var startBtn = document.getElementById('startBtn'); 
      var dailyCnt = {{dailyCount}};
      var totalCnt = {{ totalCount }};
      var totalProgress = document.getElementById('totalProgress');
      var dailyCountDone = {{dailyCountDone}};
      var totalCountDone = {{totalCountDone}};
      var intervalInput = document.getElementById('intervalInput');
      var intervalForm = document.getElementById('intervalForm');
      var projectDone = document.getElementById('projectDone');
      var fireLogo = document.getElementById('fireLogo');
      var myProgressBar = document.getElementById('myProgressBar');
      
      
      //bestDailyCount

      var bestDailyCount = {{ bestDailyCount }};

      var secondsCount = 0;
      var tenthSecondsCount = 0;
      
       //starting values for the counters, diminishing overtime;

           var secondsLeft = 60;

           var tenthSecondsLeft = 1;
      
      //var used in the increaseCounts function, to update the comparison in real time
      var comparison = '{{ comparison }}';

      //initial number of pauses, to calculate the average work sequencesDiv
       
       var numberOfPauses = {{numberOfPauses}};

       //Average Sequence HTML

       var  averageSequenceHTML = document.getElementById("averageSequenceHTML");

      
      //charts;
      var comparisonChart = document.getElementById("comparisonChart");
       
       var totalCountHoursChart = document.getElementById("totalCountHoursChart");

       var totalCountMinutesChart = document.getElementById("totalCountMinutesChart");
        
      
       var dailyCountHoursChart = document.getElementById("dailyCountHoursChart");

       var dailyCountMinutesChart = document.getElementById("dailyCountMinutesChart");
      
       var dailyCountSecondsChart = document.getElementById("dailyCountSecondsChart");
        

      var done = false;
      var interval = "{{interval}}";
      var pageReloaded = {{ pageReloaded }}
      if(interval == "on"){
         countFunction();
      }
            
            window.onbeforeunload = function(){

              if (startBtn.innerHTML == '<i class="fas fa-pause-circle fa-1x"></i>'){
                   addPause();
              }


            }

            window.onload = function(){

              window.addEventListener( "pageshow", function ( event ) {
                        var historyTraversal = event.persisted || 
                         ( typeof window.performance != "undefined" && 
                              window.performance.navigation.type === 2 );
                 if ( historyTraversal ) {
                // Handle page restore.
                 window.location.reload();
                 }
            });
          
           displayAverageSequence();
            
            //intro text

             var i = 0;
             var i2 = 0;
             var i3 = 0;
             var i4 = 0;


             var txt = ' statut: connecté'
             var txt2 = ' Projet blue beam'
             var txt3 = 'Date de création:25/09/2020'
             var txt4 = 'Immatriculation: v&678YT456b75xv79bx7665v&67'


            var speed = 10;

            function txt1writing() {
               if (i < txt.length) {
               document.getElementById("idText").innerHTML += txt.charAt(i);
               i++;
               setTimeout(txt1writing, speed);
            }
         }  

             function txt2writing() {
               if (i2 < txt2.length) {
               document.getElementById("idText2").innerHTML += txt2.charAt(i2);
               i2++;
               setTimeout(txt2writing, speed);
            }
         }

          function txt3writing() {
               if (i3 < txt3.length) {
               document.getElementById("idText3").innerHTML += txt3.charAt(i3);
               i3++;
               setTimeout(txt3writing, speed);
            }
         }

         
          function txt4writing() {
               if (i4 < txt4.length) {
               document.getElementById("idText4").innerHTML += txt4.charAt(i4);
               i4++;
               setTimeout(txt4writing, speed);
            }
         } 

          txt1writing();
          txt2writing();
          txt3writing();
          txt4writing();



                       
              totalProgress.innerHTML =  Math.floor( {{ (totalCount/totalLimit) * 100 }}) + ' %';
              myProgressBar.style.width = dailyCnt + '%';


         {%if comparison != 'firstDay'%}

                 displayGraph(topTimeChart, [dailyCnt, bestDailyCount], ['temps actuel', 'top'] , 'bar', 2800);


                {%if comparison == 'zerozero'%}

                    displayComparisonGraph( comparisonChart , [0, 0], ['Hier', 'Aujourdhui'] , 'line', 2800);

                {% else %}

                 displayComparisonGraph( comparisonChart , [0, {{comparison}}], ['Hier', 'Aujourdhui'] , 'line', 2800);
                
                {% endif %}

         {%else%}
              
                displayComparisonGraph( comparisonChart , [0, 0], ['Hier', 'Aujourdhui'] , 'line', 2800);
              
               //if first day , we don't display both comparison graphs
              
                displayGraph(topTimeChart, [0, 0], ['temps actuel', 'top'] , 'bar', 2800);


        {% endif %}
             
              displayGraph( totalCountHoursChart , [25, 35], ['Heures'] , 'doughnut', 2800);      
              displayGraph( totalCountMinutesChart , [35,60], ['Minutes'] , 'doughnut', 2800);
              displayGraph( dailyCountHoursChart , [1, 4] , ['Heures'] , 'doughnut', 2800);
              displayGraph( dailyCountMinutesChart , [1,60], ['minutes'] , 'doughnut', 2800);
              displayGraph( dailyCountSecondsChart , [1, 60], ['Secondes'] , 'doughnut', 2800);  


                  
                
            }
            

      
       
       function refreshAt(hours, minutes, seconds) {
        var now = new Date();
        var then = new Date();
       if(now.getHours() > hours ||
       (now.getHours() == hours && now.getMinutes() > minutes) ||
        now.getHours() == hours && now.getMinutes() == minutes && now.getSeconds() >= seconds) {
        then.setDate(now.getDate() + 1);
      }

    then.setHours(hours);
    then.setMinutes(minutes);
    then.setSeconds(seconds);
     
        console.log(then - now);
    
    if((then - now) < 300000){    
         
         if(startBtn.innerHTML == '<i class="fas fa-pause-circle fa-1x"></i>'){
                      intervalInput.value = 'on';
                      console.log('on!!');
                          }
        
                  console.log('letsgo');
                  storeValues();
                  intervalForm.submit();
            }
      
 }
  
     
   
         
     
     function storeValues(){
         
         xrq = new XMLHttpRequest();
         
         xrq.onload = function(){
                  console.log("stored");

         }
          xrq.open('POST', '{{ path("storeCountsPath")}}', true);
          xrq.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
          xrq.send('projectId=' + {{ projectId}} + '&totalCount=' + totalCnt +'&dailyCount=' + dailyCnt);
      }
       
        
      var myInterval;
      startBtn.addEventListener('click', function(){
         countFunction();
      })
      var storeInterval;
      //interval, checking regularly if the dailyyCount is done
      var checkDailyCountInterval;
      function countFunction(){
  

          if (startBtn.innerHTML == '<i class="fas fa-power-off fa fa-1x"></i>'){
             myInterval = setInterval(function(){ increaseCounts()}, 100);
                             
               fireLogo.style.opacity = 1;
               startBtn.innerHTML = '<i class="fas fa-pause-circle fa-1x"></i>';
            
               checkDailyCountInterval = setInterval(function(){ checkDailyCount()}, 1000); 
               storeInterval = setInterval(function(){ storeValues()}, 2000);

               averageSequenceHTML.innerHTML = '';

               averageSequenceHTML.innerHTML = 'nouvelle moyenne en cours de calcul.....';


               
             
          } else {
 
             clearInterval(myInterval);
             clearInterval(checkDailyCountInterval);
             clearInterval(storeInterval);
          
            fireLogo.style.opacity = 0;
            
            startBtn.innerHTML = '<i class="fas fa-power-off fa fa-1x"></i>';


            addPause();
              
          }
      }

    function checkDailyCount(){
      console.log(dailyCnt);
      console.log({{dailyLimit}});
         
     console.log(dailyCountDone);
     if (dailyCountDone == false){
               
        if(dailyCnt >= {{dailyLimit}}) {
           
          xrq = new XMLHttpRequest();
          xrq.onload = function(){
               
               console.log('done');
             
              updateNotifs();
              updatePin();
             console.log(JSON.parse(this.responseText).pin);
             dailyCountDone = true;
          }
          xrq.open('POST', '{{ path("dailyCountDonePath")}}', true);
          xrq.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
          xrq.send('projectId=' + {{ projectId}});
         }
      }
    }
    
      function increaseCounts(){ 

          console.log(dailyCnt);

          console.log({{ dailyLimit }});


        if( ({{ totalLimit }}- totalCnt) <= 5 ){
          if(totalCnt >= {{ totalLimit}}){
                      myfct();
          }
       }
  
          totalCnt+=1;
          dailyCnt+=1;
          myProgressBar.style.width = dailyCnt + '%';
           
          totalProgress.innerHTML =  Math.floor(((totalCnt/{{totalLimit}})*100))  + ' %';
                   
              
              //timers and charts update
             
             if( secondsCount >= 59){

               secondsCount = 0;
               secondsLeft = 60;
             } else{
                secondsCount += 0.1;
                secondsLeft -= 0.1;

             }

            if(tenthSecondsCount >= 0.9){
                tenthSecondsCount = 0;
                tenthSecondsLeft = 1;
            } else{
              tenthSecondsCount += 0.1;
              tenthSecondsLeft -= 0.1;
            }


            var totalCountLeft = ({{totalLimit}} - totalCnt); 

            if(dailyCnt >= {{ dailyLimit}}){

              dailyCountLeft = 0;
            }  else {

              dailyCountLeft = {{ dailyLimit}} - dailyCnt ;
           }
              displayGraph( totalCountHoursChart , [totalCnt, totalCountLeft], ['Heures'] , 'doughnut', 0);      
              displayGraph( totalCountMinutesChart , [ secondsCount,secondsLeft], ['Minutes'] , 'doughnut', 0);
              displayGraph( dailyCountHoursChart , [dailyCnt, dailyCountLeft] , ['total'] , 'doughnut', 0);
              displayGraph( dailyCountMinutesChart , [ secondsCount,secondsLeft], ['minutes'] , 'doughnut', 0);
              displayGraph( dailyCountSecondsChart , [ tenthSecondsCount, tenthSecondsLeft], ['10th secondes'] , 'doughnut', 0);           

                
           if( '{{ comparison}}' != 'firstDay'){
                     
                //Only display comparisons graphs, if it's not the first day
                

                 if( comparison <= 100){

                   
                 comparison = ( (( dailyCnt / {{lastDayCount}}) - 1) * 100);
                 
                 console.log("comp" + comparison);
                 
                 displayComparisonGraph( comparisonChart , [0, comparison], ['Hier', 'Aujourdhui'] , 'line', 0);
                 
                 displayGraph(topTimeChart, [dailyCnt, bestDailyCount], ['temps actuel', 'top'] , 'bar', 0);



                 }               
                  

            } 

       }


     
     
        function myfct(){
              if(done == false){
                console.log('alright');
             
                   console.log('ok');
                    clearInterval(myInterval);
                    storeValues();
                    projectDone.submit();
                    done = true;
             }
        }
    
    
      function addPause(){
                
               var xrq = new XMLHttpRequest;

               xrq.onload = function(){

                 console.log("pausesUpdated");

                   numberOfPauses += 1;
                  
                   displayAverageSequence();

                }
               
               xrq.open('GET', '{{ path("addPausePath", {"projectId": projectId }) }}', true );

               xrq.send();

              }

        

function displayAverageSequence(){

  var  averageSequence;
  var averageSequenceHours;
  var  averageSequenceMinutes;
  var  averageSequenceSeconds;

    if(dailyCnt == 0){
       averageSequence = 0;
       averageSequenceHours = 0;
       averageSequenceMinutes = 0;
       averageSequenceSeconds = 0;
    } else{

     
     averageSequence = dailyCnt/numberOfPauses;

     averageSequenceHours = Math.floor(averageSequence/360);

     averageSequenceMinutes = Math.floor(((averageSequence) - (averageSequenceHours * 360))/60);

     averageSequenceSeconds = Math.floor( averageSequence - (averageSequenceHours * 360) -  (averageSequenceMinutes*60) );
     
     averageSequenceHTML.innerHTML = '';

    }

     
    
      if(averageSequenceHours < 10){

        averageSequenceHours = "0" +  averageSequenceHours;

      }

       
     if(averageSequenceMinutes < 10){

       averageSequenceMinutes = "0" +  averageSequenceMinutes;

     } 
     
     if(averageSequenceSeconds < 10){

       averageSequenceSeconds = "0" +  averageSequenceSeconds;

     } 
      
      console.log(dailyCnt);

      console.log(numberOfPauses);


     
     console.log(averageSequenceHours + ":" + averageSequenceMinutes + ':' + averageSequenceSeconds);

     averageSequenceHTML.innerHTML += (averageSequenceHours + ":" + averageSequenceMinutes + ':' + averageSequenceSeconds);

 
}


function displayGraph(chart, data, labels, type, animationTime){

var myChart = new Chart(chart , {
    type: type,
    data: {
        labels: labels,
        datasets: [{
            label: 'stats',
            data: data, 
            backgroundColor: [
                'rgba(255, 99, 132, 0.2)',
                'rgba(54, 162, 235, 0.2)',
                'rgba(255, 206, 86, 0.2)',
                'rgba(75, 192, 192, 0.2)',
                'rgba(153, 102, 255, 0.2)',
                'rgba(255, 159, 64, 0.2)'
            ],
            borderColor: [
                'rgba(255, 99, 132, 1)',
                'rgba(54, 162, 235, 1)',
                'rgba(255, 206, 86, 1)',
                'rgba(75, 192, 192, 1)',
                'rgba(153, 102, 255, 1)',
                'rgba(255, 159, 64, 1)'
            ],
            
            borderWidth: 1
        }]
    },
    options: {

      animation: {
        duration: animationTime
      }

      ,
      
        scales: {
            yAxes: [{

                ticks: {
                    beginAtZero: true
                }
            }]
        }
    }
});


}




function displayComparisonGraph(chart, data, labels, type, animationTime){

var myChart = new Chart(chart , {
    type: type,
    data: {
        labels: labels,
        datasets: [{
            label: 'stats',
            data: data, 
            backgroundColor: [
                'rgba(255, 99, 132, 0.2)'
            ],
            borderColor: [
                'rgba(255, 99, 132, 1)',
                'rgba(54, 162, 235, 1)',
                'rgba(255, 206, 86, 1)',
                'rgba(75, 192, 192, 1)',
                'rgba(153, 102, 255, 1)',
                'rgba(255, 159, 64, 1)'
            ],
            
            borderWidth: 1
        }]
    },
    options: {

      animation: {
        duration: animationTime
      }

      ,
      
        scales: {
            yAxes: [{

                ticks: {
                    beginAtZero: true
                }
            }]
        }
    }
});


}



   {% endblock %}