{% extends 'base.html.twig' %}

{% block title %}Graph working version{% endblock %}

{% block body %}
<style>

#backgroundDiv{

 

    width: 100vw;


    display: flex; 

    flex-direction : column;

}

#mainGraph{

margin-top: 30px;

}

#topDiv{
    height: 30%; 
    
    width: 100% ; 
    
    display: flex;



}



</style>

<br>

<div id='backgroundDiv'>

<div id='topDiv'>
      <div style='height: 100%; width: 33.33%'>
      
<p>Temps journalier moyen sur ce projet : </p>

   <canvas id="averageTimeChart"></canvas>


      </div>
      <div style='height: 100%; width: 33.33%'>
        
     <p>Dynamique actuelle : </p>
         <canvas id="dynamicChart"></canvas>

         <pas de dynamique en cours</p>

      


      </div>


      <div style='height: 100%; width: 33.33%'>
      
        <p>Frequence de réalisation des objectifs journaliers :</p>
          
           <canvas id="limitRespectChart"></canvas>

        
        </div>

     </div>

     <div id='mainGraph' style='height: 70%; width: 100% ;' >


<h3><div id='displayedWeekHTML'></div></h3> <br>









<canvas id="myChart"></canvas>

<button onclick = 'lastWeekGraph()' id='lastWeekButton'>semaine précédente</button>

<button onclick= 'nextWeekGraph()'id='nextWeekButton'>semaine suivante</button>




</br>





</div>



</div>




{% endblock %}

      {% block javascripts %}



      var nextWeekButton = document.getElementById('nextWeekButton');
      var lastWeekButton = document.getElementById('lastWeekButton');

      var displayedWeek = {{displayedWeek}} ; 

      var displayedWeekHTML = document.getElementById('displayedWeekHTML');

       

       function displayWeekHTML(){

             displayedWeekHTML.innerHTML = 'Semaine' + (displayedWeek + 1) ;     
           
       }

      var currentWeek = displayedWeek ;

       function buttonsDisplay(){

          if(displayedWeek == 0){

             lastWeekButton.style.opacity = '0';

          }

            if(displayedWeek > 0){

             lastWeekButton.style.opacity = '1';

          }


          if(displayedWeek  == currentWeek ){

             nextWeekButton.style.opacity = '0';

          } else if (displayedWeek  < currentWeek){

              nextWeekButton.style.opacity = '1';

          }

      }



      window.onload = function(){ 

      displayWeekHTML();

      displayGraph();
          
      buttonsDisplay() ;
      
    } 



     var ctx = document.getElementById('myChart').getContext('2d');

     var dynamicChart = document.getElementById('dynamicChart').getContext('2d');

     var averageTimeChart =  document.getElementById('averageTimeChart').getContext('2d');


     var limitRespectChart = document.getElementById('limitRespectChart').getContext('2d');

  
      var day1 = {{ day1 }}
      var day2 = {{ day2 }}
      var day3 = {{ day3 }}
      var day4 = {{ day4 }}
      var day5 = {{ day5 }}
      var day6 = {{ day6 }}
      var day7 = {{ day7 }}



    


      function nextWeekGraph(){

          
          xrq = new XMLHttpRequest();

          xrq.onload = function(){

            console.log('ok');

            var response = JSON.parse(this.responseText);



            day1 = response.day1;
            day2 = response.day2;
            day3 = response.day3;
            day4 = response.day4;
            day5 = response.day5;
            day6 = response.day6;
            day7 = response.day7;

            
             displayedWeek = response.newDisplayedWeek;

             buttonsDisplay();

             displayGraph();

             displayWeekHTML();


          }

          xrq.open('POST', '{{ path( "graphNextWeekPath")}}' , true);

          xrq.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');

          xrq.send('projectId=' + {{ projectId}} + '&displayedWeek=' + displayedWeek);
    

        
      }

      function lastWeekGraph(){

          
          xrq = new XMLHttpRequest();

          xrq.onload = function(){

            console.log('ok');

            var response = JSON.parse(this.responseText);



            day1 = response.day1;
            day2 = response.day2;
            day3 = response.day3;
            day4 = response.day4;
            day5 = response.day5;
            day6 = response.day6;
            day7 = response.day7;

            
             displayedWeek = response.newDisplayedWeek;

             buttonsDisplay();

             displayGraph();

             displayWeekHTML();



          }

          xrq.open('POST', '{{ path( "graphLastWeekPath")}}' , true);

          xrq.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');

          xrq.send('projectId=' + {{ projectId}} + '&displayedWeek=' + displayedWeek);
    

      }


function displayGraph(){

    var chart = new Chart(ctx, {
    // The type of chart we want to create
    type: 'line',

    // The data for our dataset
    data: {
        labels: ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi', 'Dimanche'],
        datasets: [{
            label: 'temps travaillé/ jour (minutes)',
            backgroundColor: 'rgb(255, 99, 132)',
            borderColor: 'rgb(255, 99, 132)',
            data: [day1/60, day2/60, day3/60, day4/60, day5/60, day6/60, day7/60]
        }]
    },

    // Configuration options go here
    options: {}
});


}


     

function displayDynamic( days, data){

var myChart = new Chart(dynamicChart, {
    type: 'line',
    data: {
        labels: days,
        datasets: [{
            label: 'Bonus de dynamique',
            data: data, 
            backgroundColor: [
                'rgba(255, 99, 132, 0.2)',
                'rgba(54, 162, 235, 0.2)',
                'rgba(255, 206, 86, 0.2)',
                'rgba(75, 192, 192, 0.2)',
                'rgba(153, 102, 255, 0.2)',
                'rgba(255, 159, 64, 0.2)'
            ],
            borderColor: [
                'rgba(255, 99, 132, 1)',
                'rgba(54, 162, 235, 1)',
                'rgba(255, 206, 86, 1)',
                'rgba(75, 192, 192, 1)',
                'rgba(153, 102, 255, 1)',
                'rgba(255, 159, 64, 1)'
            ],
            borderWidth: 1
        }]
    },
    options: {
        scales: {
            yAxes: [{
                ticks: {
                    beginAtZero: true
                }
            }]
        }
    }
});


}





var myChart = new Chart(averageTimeChart, {
    type: 'horizontalBar',
    data: {
        labels: ['minutes/jour', '', '',''],
        datasets: [{
            label: 'Minutes travaillés/jour',
            data: [ {{ averageWorkTime }} ,0,0,0],
            backgroundColor: [
                'rgba(255, 99, 132, 0.2)',
                'rgba(54, 162, 235, 0.2)',
                'rgba(255, 206, 86, 0.2)',
                'rgba(75, 192, 192, 0.2)',
                'rgba(153, 102, 255, 0.2)',
                'rgba(255, 159, 64, 0.2)'
            ],
            borderColor: [
                'rgba(255, 99, 132, 1)',
                'rgba(54, 162, 235, 1)',
                'rgba(255, 206, 86, 1)',
                'rgba(75, 192, 192, 1)',
                'rgba(153, 102, 255, 1)',
                'rgba(255, 159, 64, 1)'
            ],
            borderWidth: 1
        }]
    },
    options: {
        scales: {
            yAxes: [{
                ticks: {
                    beginAtZero: true
                }
            }]
        }
    }
});



    
var myChart = new Chart(limitRespectChart, {
    type: 'doughnut',
    data: {
        labels: ['respecté', 'non respecté'],
        datasets: [{
            label: '# of Votes',
            data: [{{  averageDailyRespect }}, (100 - {{  averageDailyRespect }})],
            backgroundColor: [
                'rgba(255, 99, 132, 0.2)',
                'rgba(54, 162, 235, 0.2)',
                'rgba(255, 206, 86, 0.2)',
                'rgba(75, 192, 192, 0.2)',
                'rgba(153, 102, 255, 0.2)',
                'rgba(255, 159, 64, 0.2)'
            ],
            borderColor: [
                'rgba(255, 99, 132, 1)',
                'rgba(54, 162, 235, 1)',
                'rgba(255, 206, 86, 1)',
                'rgba(75, 192, 192, 1)',
                'rgba(153, 102, 255, 1)',
                'rgba(255, 159, 64, 1)'
            ],
            borderWidth: 1
        }]
    },
    options: {
        scales: {
            yAxes: [{
                ticks: {
                    beginAtZero: true
                }
            }]
        }
    }
});





    {%if dynamic > 1 %}

            {%if dynamic == 2 %}


              displayDynamic( ['jour1', 'jour2'], [0, 20]);

            {%elseif   dynamic == 3 %}
                  
                    displayDynamic( ['jour1', 'jour2', 'jour3'], [0, 20, 30]);

            {%elseif   dynamic == 4 %}

               displayDynamic( ['jour1', 'jour2','jour3', 'jour4'], [0, 20, 30, 40]);

 
            {%elseif   dynamic >= 5 %}

                displayDynamic( ['jour1', 'jour2', 'jour3', 'jour4', 'jour5'], [0, 20, 30, 40, 50]);
         
              {%endif%}

            
  
          {%elseif  dynamic <= 1 %}
 
         
             displayDynamic( ['jour1', 'jour2', 'jour3', 'jour4', 'jour5'], [0, 0, 0, 0, 0]);


     {%endif%}





        {% endblock %}
